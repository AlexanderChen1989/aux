{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js","/Users/alexanderchen/future/tmp/aux/src/app.html"],"names":[],"mappings":";;;;;;;;;;;;;;;;MAIa,cAAA,cADZ,8BAAO,OAAP;AAEC,iBAAY,OAAZ,EAAqB;AAAA;;AACnB,WAAK,OAAL,GAAe,OAAf;AACA,WAAK,OAAL,GAAe,cAAf;AACA,WAAK,UAAL,GAAkB,iBAAW,MAAX,CAAkB,UAAS,QAAT,EAAmB;AACrD,iBAAS,IAAT,CAAc,OAAd;AACA,iBAAS,IAAT,CAAc,KAAd;AACA,iBAAS,IAAT,CAAc,OAAd;AACA,iBAAS,QAAT;AACD,OALiB,CAAlB;;AAUA,WAAK,OAAL,GAAe,mBAAf;AACA,WAAK,OAAL,CAAa,SAAb,CACE;AAAA,eAAQ,QAAQ,GAAR,CAAY,WAAZ,EAAyB,IAAzB,CAAR;AAAA,OADF,EAEE;AAAA,eAAS,QAAQ,GAAR,CAAY,SAAZ,EAAuB,KAAvB,CAAT;AAAA,OAFF,EAGE;AAAA,eAAM,QAAQ,GAAR,CAAY,OAAZ,CAAN;AAAA,OAHF;AAKD;;kBAED,qCAAc;AACZ,WAAK,OAAL,CAAa,IAAb,CAAkB,OAAlB;AACA,WAAK,OAAL,CAAa,IAAb,CAAkB,OAAlB;AACA,WAAK,OAAL,CAAa,QAAb;AACD;;kBAED,iCAAY;AACV,WAAK,UAAL,CAAgB,SAAhB,CACE;AAAA,eAAQ,QAAQ,GAAR,CAAY,OAAZ,EAAqB,IAArB,CAAR;AAAA,OADF,EAEE;AAAA,eAAS,QAAQ,GAAR,CAAY,QAAZ,EAAsB,KAAtB,CAAT;AAAA,OAFF,EAGE;AAAA,eAAM,QAAQ,GAAR,CAAY,OAAZ,CAAN;AAAA,OAHF;AAKD;;;;;;;;;;;oBCtCY;AACb,WAAO,IADM;AAEb,aAAS;AAFI;;;;;;;;UCUC,YAAA;;;;;;;;;;AANhB,UAAQ,MAAR,CAAe;AACb,cAAU;AACR,wBAAkB;AADV;AADG,GAAf;;AAMO,WAAS,SAAT,CAAmB,OAAnB,EAA4B;AACjC,YAAQ,GAAR,CACG,qBADH,GAEG,OAFH,CAEW,WAFX;;AAIA,QAAI,sBAAY,KAAhB,EAAuB;AACrB,cAAQ,GAAR,CAAY,kBAAZ;AACD;;AAED,QAAI,sBAAY,OAAhB,EAAyB;AACvB,cAAQ,GAAR,CAAY,MAAZ,CAAmB,iBAAnB;AACD;;AAED,YAAQ,KAAR,GAAgB,IAAhB,CAAqB;AAAA,aAAM,QAAQ,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;UCxBe,YAAA;AAAT,WAAS,SAAT,CAAmB,MAAnB,EAA2B,CAEjC;;ACFD","file":"app-bundle.js","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { inject } from 'aurelia-framework';\n\n@inject(Element)\nexport class App {\n  constructor(element) {\n    this.element = element;\n    this.message = 'Hello World!';\n    this.observable = Observable.create(function(observer) {\n      observer.next('Simon');\n      observer.next('Jen');\n      observer.next('Sergi');\n      observer.complete(); // We are done\n    });\n    // this.allMoves = Observable.fromEvent(document, 'mousemove')\n    // this.allMoves.subscribe(function(e) {\n    //   console.log(e.clientX, e.clientY);\n    // });\n    this.subject = new Subject();\n    this.subject.subscribe(\n      next => console.log(\"Subject: \", next),\n      error => console.log(\"Error: \", error),\n      () => console.log(\"Done!\")\n    )\n  }\n\n  subjectTest() {\n    this.subject.next(\"Hello\");\n    this.subject.next(\"world\");\n    this.subject.complete();\n  }\n\n  subscribe() {\n    this.observable.subscribe(\n      next => console.log(\"Next:\", next),\n      error => console.log(\"Error:\", error),\n      () => console.log(\"Done!\")\n    )\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n",null],"sourceRoot":"../src"}